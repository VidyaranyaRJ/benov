name: Terraform EFS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_STATE_BUCKET: vj-test-benvolate
  TF_STATE_KEY: "EC2/terraform.tfstate"   # Network EFS EC2
  AWS_REGION: us-east-2

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/code/EC2   # Network EFS EC2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=us-east-2" \
            -backend-config="encrypt=true"

      # - name: Terraform Format Check
      #   run: terraform fmt -check
      #   continue-on-error: true

      # - name: Terraform Validate
      #   run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan


      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan



      - name: Extract instance ID safely using jq
        shell: bash
        run: |
          INSTANCE_ID=$(terraform output -json | jq -r '.module_instance_id_for_ssm.value')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Get Instance ID for SSM
        id: get_instance
        run: |
          # Read the instance ID from the file and strip the newline
          INSTANCE_ID=$(cat instance_id.txt | tr -d '\n')
          echo "Using Instance ID: $INSTANCE_ID"

          # Save it to GitHub environment WITHOUT newline
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for SSM to be ready
        run: |
          echo "Waiting for EC2 + SSM Agent to initialize..."
          sleep 60

      - name: Verify environment variable
        run: |
          echo "Instance ID from environment: $INSTANCE_ID"
          if [ -z "$INSTANCE_ID" ]; then
            echo "Using hardcoded ID as fallback"
            INSTANCE_ID="i-01f735f2b02fa758e"
          fi
          echo "Final Instance ID: $INSTANCE_ID" 

      - name: Check Node.js, PM2, EFS status
        run: |
          # Read ID from file as a backup method
          if [ -z "$INSTANCE_ID" ]; then
            INSTANCE_ID=$(cat instance_id.txt)
            if [ -z "$INSTANCE_ID" ]; then
              INSTANCE_ID="i-01f735f2b02fa758e"
            fi
          fi
          
          echo "Running diagnostics on EC2 instance: $INSTANCE_ID"
          
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["node -v", "pm2 list", "df -h | grep efs"]' \
            --comment "Check Node.js, PM2, and EFS status" \
            --region ${{ env.AWS_REGION }} \
            --output text

      - name: Verify EFS directory contents
        run: |
          # Read ID from file as a backup method
          if [ -z "$INSTANCE_ID" ]; then
            INSTANCE_ID=$(cat instance_id.txt)
            if [ -z "$INSTANCE_ID" ]; then
              INSTANCE_ID="i-01f735f2b02fa758e"
            fi
          fi
          
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["ls -l /mnt/efs/code/nodejs-app", "cat /mnt/efs/code/nodejs-app/.env"]' \
            --comment "Check app deployment and env file" \
            --region ${{ env.AWS_REGION }} \
            --output text
