name: Terraform EFS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_STATE_BUCKET: vj-test-benvolate
  TF_STATE_KEY: "EC2/terraform.tfstate"   # Network EFS EC2
  AWS_REGION: us-east-2

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/code/EC2   # Network EFS EC2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=us-east-2" \
            -backend-config="encrypt=true"

      # - name: Terraform Format Check
      #   run: terraform fmt -check
      #   continue-on-error: true

      # - name: Terraform Validate
      #   run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan


      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan



      - name: Download remote tfstate from S3
        run: |
          aws s3 cp s3://vj-test-benvolate/EC2/terraform.tfstate tfstate.json

      - name: Read instance ID from tfstate.json
        run: |
          INSTANCE_ID=$(jq -r '.outputs.module_instance_id_for_ssm.value' tfstate.json)
          echo "Resolved from tfstate: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for SSM to be ready
        run: |
          echo "Waiting for EC2 + SSM Agent to initialize..."
          sleep 60

      - name: Verify instance ID from environment
        run: |
          echo "Instance ID from environment: $INSTANCE_ID"
          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: INSTANCE_ID is not set. Make sure tfstate.json contains the correct output."
            exit 1
          fi

      - name: Check Node.js, PM2, EFS status and wait for result
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["node -v", "pm2 list", "df -h | grep efs"]' \
            --comment "Check Node.js, PM2, and EFS status" \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "SSM command sent: $CMD_ID"
          
          for i in {1..20}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "Status" \
              --output text)
              
            echo "Command status: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --output text
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "‚ùå Command failed or cancelled"
              exit 1
            fi
            
            echo "Waiting for 5 seconds..."
            sleep 5
          done

      - name: Verify EFS directory contents and wait for result
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["ls -l /mnt/efs/code/nodejs-app", "cat /mnt/efs/code/nodejs-app/.env"]' \
            --comment "Check app deployment and env file" \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "SSM command sent: $CMD_ID"

          for i in {1..20}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "Status" \
              --output text)

            echo "Command status: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --output text
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Command failed or cancelled"
              exit 1
            fi

            echo "Waiting for 5 seconds..."
            sleep 5
          done

      - name: Start Node.js app using PM2 and verify
        # env:
        #   INSTANCE_ID: ${{ env.INSTANCE_ID }}
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /mnt/efs/code/nodejs-app",
              "npm install",
              "npm list -g pm2 || npm install -g pm2",
              "pm2 start index.js --name myapp || echo PM2_START_FAILED=true",
              "pm2 save",
              "pm2 list",
              "pm2 logs --lines 30 || echo PM2_LOGS_FAILED=true",
              "cat /mnt/efs/logs/init.log || echo NO_INIT_LOG=true"
            ]' \
            --comment "Start Node.js app with PM2 and log analysis" \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "Sent PM2 start command: $CMD_ID"

          for i in {1..12}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "Status" \
              --output text)
            
            echo "Command status: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --output text
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "PM2 app launch or log analysis failed"
              exit 1
            fi
            sleep 5
          done