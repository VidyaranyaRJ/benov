name: Node.js App Deployment via Rsync to EFS

on:
  push:
    branches: [dev, uat, main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, uat, prod)"
        required: true
        default: dev
        type: choice
        options: [dev, uat, prod]

env:
  DEPLOY_PATH: /mnt/efs/code/nodejs-app
  AWS_REGION: us-east-2
  APP_NAME: nodejs-app
  APP_PORT: 3000

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi
          echo "🎯 Deploying to environment: $ENVIRONMENT"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl rsync
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Get EC2 instances for deployment
        id: get_instances
        run: |
          echo "🔍 Finding EC2 instances for environment: $ENVIRONMENT"
          
          INSTANCES_JSON=$(aws ec2 describe-instances \
            --region "$AWS_REGION" \
            --filters "Name=tag:Environment,Values=${ENVIRONMENT}" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress,Tags[?Key==`Name`].Value|[0]]' \
            --output json)
          
          echo "Raw JSON output:"
          echo "$INSTANCES_JSON"
          
          PUBLIC_IPS=$(echo "$INSTANCES_JSON" | jq -r '.[][] | select(.[1] != null) | .[1]' | tr '\n' ' ')
          
          if [[ -z "$PUBLIC_IPS" || "$PUBLIC_IPS" == " " ]]; then
            echo "❌ No running EC2 instances with public IPs found for environment: $ENVIRONMENT"
            exit 1
          fi
          
          PUBLIC_IPS=$(echo "$PUBLIC_IPS" | xargs)
          echo "EC2_INSTANCE_IPS=$PUBLIC_IPS" >> "$GITHUB_ENV"
          echo "📋 Found instances with public IPs: $PUBLIC_IPS"

      - name: Test SSH connectivity
        run: |
          echo "🔧 Testing SSH connectivity..."
          SUCCESS_COUNT=0
          
          for ip in $EC2_INSTANCE_IPS; do
            echo "Testing SSH to $ip..."
            
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=15 -o BatchMode=yes ec2-user@$ip "echo 'Connected to $ip'" 2>/dev/null; then
              echo "✅ SSH connection successful to $ip"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "❌ SSH connection failed to $ip"
            fi
          done
          
          if [[ $SUCCESS_COUNT -eq 0 ]]; then
            echo "❌ No SSH connections successful. Aborting deployment."
            exit 1
          fi

      - name: Deploy application files
        run: |
          echo "🚀 Starting deployment..."
          SUCCESS_COUNT=0
          
          for ip in $EC2_INSTANCE_IPS; do
            echo "📁 Deploying to $ip..."
            
            if ! ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "❌ Skipping $ip - SSH not accessible"
              continue
            fi
            
            # Create deployment directory
            ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "sudo mkdir -p $DEPLOY_PATH && sudo chown ec2-user:ec2-user $DEPLOY_PATH"
            
            # Sync files
            if rsync -avz --delete \
              -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" \
              --exclude='node_modules/' \
              --exclude='.git/' \
              --exclude='*.log' \
              --exclude='.env' \
              ./Nodejs/ ec2-user@$ip:$DEPLOY_PATH/; then
              echo "✅ File sync completed for $ip"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "❌ File sync failed for $ip"
            fi
          done
          
          if [[ $SUCCESS_COUNT -eq 0 ]]; then
            echo "❌ No deployments successful"
            exit 1
          fi

      - name: Install Node.js dependencies
        run: |
          echo "📦 Installing Node.js dependencies..."
          
          for ip in $EC2_INSTANCE_IPS; do
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "📦 Installing dependencies on $ip..."
              
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "
                cd $DEPLOY_PATH && 
                if [ -f package.json ]; then
                  echo '📋 Installing npm dependencies...'
                  npm install --production
                else
                  echo '⚠️  No package.json found'
                fi
              "
            fi
          done

      - name: Stop existing applications
        run: |
          echo "🛑 Stopping existing applications..."
          
          for ip in $EC2_INSTANCE_IPS; do
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "🛑 Stopping applications on $ip..."
              
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "
                # Kill any processes on port $APP_PORT
                if lsof -Pi :$APP_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
                  echo '🔍 Found processes on port $APP_PORT, killing them...'
                  lsof -ti:$APP_PORT | xargs kill -9 2>/dev/null || true
                  sleep 2
                fi
                
                # Stop PM2 processes if any
                if command -v pm2 &> /dev/null; then
                  pm2 stop all 2>/dev/null || true
                  pm2 delete all 2>/dev/null || true
                fi
                
                echo '✅ No orphan process found on port $APP_PORT.'
              "
            fi
          done

      - name: Start applications
        run: |
          echo "🚀 Starting applications..."
          START_SUCCESS=0
          
          for ip in $EC2_INSTANCE_IPS; do
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "🚀 Starting application on $ip..."
              
              if ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "
                cd $DEPLOY_PATH
                echo '📁 Now in \$(pwd)'
                
                # Check if PM2 is installed
                if ! command -v pm2 &> /dev/null; then
                  echo '❌ PM2 is not installed'
                  exit 1
                fi
                
                # Start the application
                if [ -f ecosystem.config.js ]; then
                  echo '📋 Starting with ecosystem.config.js'
                  pm2 start ecosystem.config.js
                elif [ -f app.js ]; then
                  echo '📋 Starting app.js'
                  pm2 start app.js --name $APP_NAME
                else
                  echo '❌ No application file found'
                  exit 1
                fi
                
                # Wait for startup
                sleep 5
                
                # Verify the application
                pm2 list
                
                if pm2 describe $APP_NAME | grep -q 'online'; then
                  echo '✅ Application is online'
                else
                  echo '❌ Application is not online'
                  pm2 logs $APP_NAME --lines 10
                  exit 1
                fi
                
                # Check port
                if lsof -Pi :$APP_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
                  echo '✅ Application is listening on port $APP_PORT'
                else
                  echo '❌ Application is not listening on port $APP_PORT'
                  exit 1
                fi
                
                # Save PM2 configuration
                pm2 save
                
                echo '✅ Application started successfully'
              "; then
                echo "✅ Application started successfully on $ip"
                START_SUCCESS=$((START_SUCCESS + 1))
              else
                echo "❌ Application start failed on $ip"
              fi
            fi
          done
          
          if [[ $START_SUCCESS -eq 0 ]]; then
            echo "❌ No applications started successfully"
            exit 1
          else
            echo "✅ Applications started successfully on $START_SUCCESS instances"
          fi

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          for ip in $EC2_INSTANCE_IPS; do
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "🔍 Verifying $ip..."
              
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "
                echo '📊 PM2 Status:'
                pm2 list
                
                echo '📊 Port Status:'
                netstat -tlnp | grep ':$APP_PORT ' || ss -tlnp | grep ':$APP_PORT ' || echo 'Port not found'
                
                echo '📊 Application Info:'
                pm2 info $APP_NAME 2>/dev/null || echo 'Could not get app info'
              "
            fi
          done
          
          echo "✅ Deployment verification completed"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          rm -f ec2_key.pem
          echo "✅ Cleanup completed"