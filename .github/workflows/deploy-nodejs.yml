name: Node.js App Deployment via Rsync to EFS

on:
  push:
    branches: [dev, uat, main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, uat, prod)"
        required: true
        default: dev
        type: choice
        options: [dev, uat, prod]

env:
  DEPLOY_PATH: /mnt/efs/code/nodejs-app
  AWS_REGION: us-east-2
  TF_STATE_BUCKET: vj-test-benvolate
  SSH_KEY_NAME: vj-Benevolate.pem

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      - name: Install AWS CLI & Tree
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli tree

      - name: Download SSH Key from S3
        run: |
          echo "üì• Downloading SSH key from S3..."
          SSH_S3_PATH="s3://$TF_STATE_BUCKET/EC2/$SSH_KEY_NAME"
          if ! aws s3 cp "$SSH_S3_PATH" "$SSH_KEY_NAME" --region "$AWS_REGION"; then
            echo "‚ùå SSH key not found in S3 at $SSH_S3_PATH"
            exit 1
          fi
          chmod 600 $SSH_KEY_NAME

      - name: Get EC2 Public IPs by Environment
        id: ec2-ip
        run: |
          echo "üîç Finding EC2 instances for environment: $ENVIRONMENT"
          INSTANCE_IPS=$(aws ec2 describe-instances \
            --region $AWS_REGION \
            --filters "Name=tag:Environment,Values=${ENVIRONMENT}" \
                      "Name=tag:Name,Values=*-$(echo $ENVIRONMENT)" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
          
          if [[ -z "$INSTANCE_IPS" ]]; then
            echo "‚ùå No running EC2 instances found for environment: $ENVIRONMENT"
            exit 1
          fi

          echo "EC2_INSTANCE_IPS=$INSTANCE_IPS" >> $GITHUB_ENV

      - name: Rsync changed files to EC2s (no delete)
        run: |
          for ip in $EC2_INSTANCE_IPS; do
            echo "üîÅ Syncing to $ip ..."
            rsync -avz \
              -e "ssh -i $SSH_KEY_NAME -o StrictHostKeyChecking=no" \
              ./Nodejs/ ec2-user@$ip:$DEPLOY_PATH/
          done

      - name: Run PM2 reset script on EC2s
        run: |
          for ip in $EC2_INSTANCE_IPS; do
            echo "üöÄ Running PM2 reset on $ip ..."
            ssh -i $SSH_KEY_NAME -o StrictHostKeyChecking=no ec2-user@$ip \
              "bash $DEPLOY_PATH/scripts/pm2-reset-restart.sh"
          done
