name: Node.js App Deployment via Rsync to EFS

on:
  push:
    branches: [dev, uat, main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, uat, prod)"
        required: true
        default: dev
        type: choice
        options: [dev, uat, prod]

env:
  DEPLOY_PATH: /mnt/efs/code/nodejs-app
  AWS_REGION: us-east-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      - name: Install AWS CLI and tree (Ubuntu 24.04 compatible)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl tree
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Write SSH key from GitHub secret
        run: |
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 public IPs by Environment
        run: |
          echo "üîç Finding EC2 instances for environment: $ENVIRONMENT"
          INSTANCE_IPS=$(aws ec2 describe-instances \
            --region "$AWS_REGION" \
            --filters "Name=tag:Environment,Values=${ENVIRONMENT}" \
                      "Name=tag:Name,Values=*-$(echo $ENVIRONMENT)" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

          if [[ -z "$INSTANCE_IPS" ]]; then
            echo "‚ùå No running EC2 instances found for environment: $ENVIRONMENT"
            exit 1
          fi

          # Store IPs as space-separated string without shell escaping
          echo "EC2_INSTANCE_IPS=$INSTANCE_IPS" >> "$GITHUB_ENV"
          echo "üìã Found instances: $INSTANCE_IPS"

      - name: Verify SSH connectivity
        run: |
          echo "üîß Testing SSH connectivity to all instances..."
          for ip in $EC2_INSTANCE_IPS; do
            if [[ -n "$ip" && "$ip" != "None" ]]; then
              echo "Testing connection to $ip..."
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$ip "echo 'SSH connection successful to $ip'" || {
                echo "‚ùå Failed to connect to $ip"
                exit 1
              }
            fi
          done

      - name: Rsync changed files to EC2s (no delete)
        run: |
          for ip in $EC2_INSTANCE_IPS; do
            if [[ -n "$ip" && "$ip" != "None" ]]; then
              echo "üîÅ Syncing to $ip ..."
              rsync -avz \
                -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" \
                --exclude='node_modules/' \
                --exclude='.git/' \
                --exclude='*.log' \
                ./Nodejs/ ec2-user@$ip:$DEPLOY_PATH/
              echo "‚úÖ Sync completed for $ip"
            else
              echo "‚ö†Ô∏è  Skipping empty or None IP address"
            fi
          done

      - name: Run PM2 reset script on EC2s
        run: |
          for ip in $EC2_INSTANCE_IPS; do
            if [[ -n "$ip" && "$ip" != "None" ]]; then
              echo "üöÄ Running PM2 reset on $ip ..."
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
                "bash $DEPLOY_PATH/scripts/pm2-reset-restart.sh"
              echo "‚úÖ PM2 reset completed for $ip"
            else
              echo "‚ö†Ô∏è  Skipping empty or None IP address"
            fi
          done

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ec2_key.pem