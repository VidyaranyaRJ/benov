name: Node.js App Deployment via Rsync to EFS

on:
  push:
    branches: [dev, uat, main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, uat, prod)"
        required: true
        default: dev
        type: choice
        options: [dev, uat, prod]

env:
  DEPLOY_PATH: /mnt/efs/code/nodejs-app
  AWS_REGION: us-east-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi
          echo "üéØ Deploying to environment: $ENVIRONMENT"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Get EC2 instances for deployment
        id: get_instances
        run: |
          echo "üîç Finding EC2 instances for environment: $ENVIRONMENT"
          
          # Get instances in JSON format for better parsing
          INSTANCES_JSON=$(aws ec2 describe-instances \
            --region "$AWS_REGION" \
            --filters "Name=tag:Environment,Values=${ENVIRONMENT}" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress,Tags[?Key==`Name`].Value|[0]]' \
            --output json)
          
          echo "Raw JSON output:"
          echo "$INSTANCES_JSON"
          
          # Extract public IPs, filtering out null values
          PUBLIC_IPS=$(echo "$INSTANCES_JSON" | jq -r '.[][] | select(.[1] != null) | .[1]' | tr '\n' ' ')
          
          if [[ -z "$PUBLIC_IPS" || "$PUBLIC_IPS" == " " ]]; then
            echo "‚ùå No running EC2 instances with public IPs found for environment: $ENVIRONMENT"
            echo "Available instances:"
            echo "$INSTANCES_JSON" | jq -r '.[][] | "\(.[0]) - \(.[2] // "No Name") - Public IP: \(.[1] // "None")"'
            exit 1
          fi
          
          # Clean up the IPs string
          PUBLIC_IPS=$(echo "$PUBLIC_IPS" | xargs)
          
          echo "EC2_INSTANCE_IPS=$PUBLIC_IPS" >> "$GITHUB_ENV"
          echo "üìã Found instances with public IPs: $PUBLIC_IPS"
          
          # Count instances
          IP_COUNT=$(echo "$PUBLIC_IPS" | wc -w)
          echo "üìä Total instances: $IP_COUNT"

      - name: Test SSH connectivity
        run: |
          echo "üîß Testing SSH connectivity..."
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          
          for ip in $EC2_INSTANCE_IPS; do
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            echo "Testing SSH to $ip..."
            
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=15 -o BatchMode=yes ec2-user@$ip "echo 'Connected to $ip'" 2>/dev/null; then
              echo "‚úÖ SSH connection successful to $ip"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ùå SSH connection failed to $ip"
              echo "Retrying with verbose output..."
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=15 -vvv ec2-user@$ip "echo 'test'" 2>&1 | head -20
            fi
          done
          
          if [[ $SUCCESS_COUNT -eq 0 ]]; then
            echo "‚ùå No SSH connections successful. Aborting deployment."
            exit 1
          elif [[ $SUCCESS_COUNT -lt $TOTAL_COUNT ]]; then
            echo "‚ö†Ô∏è  Only $SUCCESS_COUNT out of $TOTAL_COUNT instances accessible via SSH"
            echo "Continuing with accessible instances..."
          else
            echo "‚úÖ All $TOTAL_COUNT instances accessible via SSH"
          fi

      - name: Deploy application files
        run: |
          echo "üöÄ Starting deployment..."
          SUCCESS_COUNT=0
          
          for ip in $EC2_INSTANCE_IPS; do
            echo "üìÅ Deploying to $ip..."
            
            # Test SSH first
            if ! ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "‚ùå Skipping $ip - SSH not accessible"
              continue
            fi
            
            # Create deployment directory if it doesn't exist
            ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "sudo mkdir -p $DEPLOY_PATH && sudo chown ec2-user:ec2-user $DEPLOY_PATH"
            
            # Sync files
            if rsync -avz --delete \
              -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" \
              --exclude='node_modules/' \
              --exclude='.git/' \
              --exclude='*.log' \
              --exclude='.env' \
              ./Nodejs/ ec2-user@$ip:$DEPLOY_PATH/; then
              echo "‚úÖ File sync completed for $ip"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ùå File sync failed for $ip"
            fi
          done
          
          if [[ $SUCCESS_COUNT -eq 0 ]]; then
            echo "‚ùå No deployments successful"
            exit 1
          else
            echo "‚úÖ Deployed successfully to $SUCCESS_COUNT instances"
          fi

      - name: Restart application services
        run: |
          echo "üîÑ Restarting application services..."
          
          for ip in $EC2_INSTANCE_IPS; do
            echo "üöÄ Restarting services on $ip..."
            
            # Test SSH first
            if ! ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@$ip "echo 'test'" >/dev/null 2>&1; then
              echo "‚ùå Skipping $ip - SSH not accessible"
              continue
            fi
            
            # Check if PM2 script exists and run it
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "test -f $DEPLOY_PATH/scripts/pm2-reset-restart.sh"; then
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "cd $DEPLOY_PATH && bash scripts/pm2-reset-restart.sh"
              echo "‚úÖ PM2 restart completed for $ip"
            else
              echo "‚ö†Ô∏è  PM2 script not found on $ip, attempting manual restart..."
              ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$ip "cd $DEPLOY_PATH && pm2 restart all || pm2 start ecosystem.config.js || echo 'Manual restart required'"
            fi
          done

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          for ip in $EC2_INSTANCE_IPS; do
            echo "Checking $ip..."
            
            if ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$ip "pm2 list" 2>/dev/null; then
              echo "‚úÖ PM2 processes running on $ip"
            else
              echo "‚ö†Ô∏è  Could not verify PM2 status on $ip"
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          rm -f ec2_key.pem
          echo "‚úÖ Cleanup completed"