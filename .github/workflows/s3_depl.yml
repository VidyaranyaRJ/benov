# Network EFS EC2

 

name: Terraform EFS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_STATE_BUCKET: vj-test-benvolate
  TF_STATE_KEY: "EFS/terraform.tfstate"
  AWS_REGION: us-east-2
  ZIP_NAME: nodejs-app.zip
  ZIP_S3_KEY: artifacts/nodejs-app.zip

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/EFS  # adjust if Terraform is deeper

    steps:
      # === 1. Checkout this repo ===
      - name: Checkout Repository
        uses: actions/checkout@v3

      # === 2. Zip the Nodejs folder ===
      - name: Zip Nodejs app
        run: |
          zip -r ${{ env.ZIP_NAME }} Nodejs
          mv ${{ env.ZIP_NAME }} ./  # or move to terraform/code/ if needed
        working-directory: ${{ github.workspace }}

      # === 3. Upload ZIP to S3 ===
      - name: Upload ZIP to S3
        run: |
          aws s3 cp ${{ env.ZIP_NAME }} s3://${{ env.TF_STATE_BUCKET }}/${{ env.ZIP_S3_KEY }}
        working-directory: ${{ github.workspace }}

      # === 4. Terraform Setup ===
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan





# #########################################


#       # === 6. Extract EC2 Instance ID from tfstate ===
#       - name: Download remote tfstate from S3
#         run: aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} tfstate.json

#       - name: Read instance ID from tfstate.json
#         run: |
#           INSTANCE_ID=$(jq -r '.outputs.module_instance_id_for_ssm.value' tfstate.json)
#           echo "Resolved from tfstate: $INSTANCE_ID"
#           echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

#       - name: Wait for SSM to be ready
#         run: |
#           echo "Waiting for EC2 + SSM Agent to initialize..."
#           sleep 60

#       # === 7. Install Node App from S3 to EFS and Start with PM2 ===
#       - name: Deploy & Restart Node.js App with Zero Downtime
#         run: |
#           CMD_ID=$(aws ssm send-command \
#             --instance-ids "$INSTANCE_ID" \
#             --document-name "AWS-RunShellScript" \
#             --parameters 'commands=[
#               "set -e",

#               "# Ensure directories exist",
#               "mkdir -p /mnt/efs/code /mnt/efs/logs",

#               "# Download app ZIP from S3",
#               "aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.ZIP_S3_KEY }} /mnt/efs/code/${{ env.ZIP_NAME }}",

#               "# Extract to a temp folder",
#               "rm -rf /mnt/efs/code/nodejs-app-temp",
#               "mkdir -p /mnt/efs/code/nodejs-app-temp",
#               "unzip -o /mnt/efs/code/${{ env.ZIP_NAME }} -d /mnt/efs/code/nodejs-app-temp",

#               "# Install dependencies",
#               "cd /mnt/efs/code/nodejs-app-temp",
#               "npm install",

#               "# Ensure PM2 is available",
#               "if ! command -v pm2 > /dev/null; then npm install -g pm2; fi",

#               "# Atomically switch the app directory using symlink",
#               "ln -sfn /mnt/efs/code/nodejs-app-temp /mnt/efs/code/nodejs-app",

#               "# Start or reload the app via PM2",
#               "cd /mnt/efs/code/nodejs-app",
#               "pm2 describe nodejs-app > /dev/null && pm2 reload nodejs-app --update-env || pm2 start index.js --name nodejs-app",
#               "pm2 save"
#             ]' \
#             --region ${{ env.AWS_REGION }} \
#             --comment "Zero-downtime Node.js deploy via symlink + PM2" \
#             --query "Command.CommandId" \
#             --output text)

#           echo "SSM command sent: $CMD_ID"

#           for i in {1..15}; do
#             STATUS=$(aws ssm get-command-invocation \
#               --command-id "$CMD_ID" \
#               --instance-id "$INSTANCE_ID" \
#               --region ${{ env.AWS_REGION }} \
#               --query "Status" \
#               --output text)

#             echo "Command status: $STATUS"
#             if [[ "$STATUS" == "Success" ]]; then
#               echo "✅ App deployed and restarted successfully."
#               break
#             elif [[ "$STATUS" == "Failed" ]]; then
#               echo "❌ Deployment failed"
#               exit 1
#             fi
#             sleep 5
#           done

#       # === 8. Configure Nginx (Optional If Already Done) ===
#       - name: Install and configure Nginx via SSM
#         run: |
#           CMD_ID=$(aws ssm send-command \
#             --instance-ids "$INSTANCE_ID" \
#             --document-name "AWS-RunShellScript" \
#             --parameters 'commands=[
#               "sudo yum install -y nginx",
#               "sudo systemctl enable nginx",
#               "sudo systemctl start nginx",
#               "sudo bash -c \"cat > /etc/nginx/conf.d/nodeapp.conf <<EOF\nserver {\n    listen 80;\n    server_name _;\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \$host;\n        proxy_cache_bypass \$http_upgrade;\n    }\n}\nEOF\"",
#               "sudo nginx -t && sudo systemctl reload nginx"
#             ]' \
#             --region ${{ env.AWS_REGION }} \
#             --query "Command.CommandId" \
#             --output text)

#           echo "Nginx configured on EC2."

