# name: Terraform EFS Deployment

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:

# env:
#   TF_STATE_BUCKET: vj-test-benvolate
#   TF_STATE_KEY: "EFS/terraform.tfstate"     # Network EFS EC2
#   AWS_REGION: us-east-2
#   ZIP_NAME: nodejs-app.zip
#   ZIP_S3_KEY: nodejs/nodejs-app.zip 

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Checkout Node.js App Code (ensure latest commit)
#         uses: actions/checkout@v3
#         with:
#           ref: main  # Changed from 'nodejs' to 'main'

#       - name: Confirm index.js has updated text
#         run: grep 'Hello' Nodejs/index.js

#       - name: Clean old zip
#         run: rm -f ${{ env.ZIP_NAME }}

#       - name: Zip Node.js App (with correct structure)
#         run: |
#           cd Nodejs
#           zip -r ../${{ env.ZIP_NAME }} .
#           ls -lh ../${{ env.ZIP_NAME }}

#       - name: Upload deploy script to S3
#         run: aws s3 cp scripts/node-deploy.sh s3://${{ env.TF_STATE_BUCKET }}/scripts/node-deploy.sh

#       - name: Upload Node.js App Zip to S3
#         run: aws s3 cp ${{ env.ZIP_NAME }} s3://${{ env.TF_STATE_BUCKET }}/${{ env.ZIP_S3_KEY }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0

#       - name: Verify AWS Access
#         run: aws sts get-caller-identity

#       - name: Terraform Init
#         run: |
#           terraform init \
#             -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
#             -backend-config="key=${{ env.TF_STATE_KEY }}" \
#             -backend-config="region=${{ env.AWS_REGION }}" \
#             -backend-config="encrypt=true"
#         working-directory: ./terraform/code/EFS    # Network EFS EC2

#       - name: Terraform Plan
#         run: terraform plan -input=false -out=tfplan
#         working-directory: ./terraform/code/EFS     # Network EFS EC2

#       # - name: Terraform Destroy
#       #   run: terraform destroy -auto-approve
#       #   working-directory: ./terraform/code/EFS     # Network EFS EC2

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan
#         working-directory: ./terraform/code/EFS     # Network EFS EC2


      # # === 6. Extract EC2 Instance ID from tfstate ===
      # - name: Download remote tfstate from S3
      #   run: aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} tfstate.json

      # - name: Read instance ID from tfstate.json
      #   run: |
      #     INSTANCE_ID=$(jq -r '.outputs.module_instance_id_for_ssm.value' tfstate.json)
      #     echo "Resolved from tfstate: $INSTANCE_ID"
      #     echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      # - name: Wait for SSM to be ready
      #   run: |
      #     echo "Waiting for EC2 + SSM Agent to initialize..."
      #     sleep 60

      # # === 7. Install Node App from S3 to EFS and Start with PM2 ===
      # - name: Deploy & Restart Node.js App with Zero Downtime
      #   run: |
      #     CMD_ID=$(aws ssm send-command \
      #       --instance-ids "$INSTANCE_ID" \
      #       --document-name "AWS-RunShellScript" \
      #       --parameters 'commands=[
      #         "curl -o /tmp/node-deploy.sh https://vj-test-benvolate.s3.us-east-2.amazonaws.com/scripts/node-deploy.sh",
      #         "chmod +x /tmp/node-deploy.sh",
      #         "bash /tmp/node-deploy.sh"
      #       ]' \
      #       --region ${{ env.AWS_REGION }} \
      #       --query "Command.CommandId" \
      #       --output text)

      #     echo "SSM command sent: $CMD_ID"

      #     for i in {1..30}; do
      #       STATUS=$(aws ssm get-command-invocation \
      #         --command-id "$CMD_ID" \
      #         --instance-id "$INSTANCE_ID" \
      #         --region ${{ env.AWS_REGION }} \
      #         --query "Status" \
      #         --output text 2>/dev/null || echo "Pending")

      #       echo "Command status: $STATUS"

      #       if [[ "$STATUS" == "Success" ]]; then
      #         echo "✅ App deployed and restarted successfully."
      #         break
      #       elif [[ "$STATUS" == "Failed" ]]; then
      #         echo "❌ Deployment failed"
      #         aws ssm get-command-invocation \
      #           --command-id "$CMD_ID" \
      #           --instance-id "$INSTANCE_ID" \
      #           --region ${{ env.AWS_REGION }}
      #         exit 1
      #       fi

      #       sleep 10
      #     done

      # - name: Configure Nginx reverse proxy for Node.js
      #   run: |
      #     CMD_ID=$(aws ssm send-command \
      #       --instance-ids "$INSTANCE_ID" \
      #       --document-name "AWS-RunShellScript" \
      #       --parameters 'commands=[
      #         "sudo bash -c \\\"cat > /etc/nginx/conf.d/nodeapp.conf <<EOF",
      #         "server {",
      #         "  listen 80;",
      #         "  server_name _;",
      #         "  location / {",
      #         "    proxy_pass http://localhost:3000;",
      #         "    proxy_http_version 1.1;",
      #         "    proxy_set_header Upgrade \\\\$http_upgrade;",
      #         "    proxy_set_header Connection '\''upgrade'\''\\;",
      #         "    proxy_set_header Host \\\\$host;",
      #         "    proxy_cache_bypass \\\\$http_upgrade;",
      #         "  }",
      #         "}",
      #         "EOF\\\"",
      #         "sudo rm -f /etc/nginx/conf.d/default.conf",
      #         "sudo nginx -t && sudo systemctl reload nginx"
      #       ]' \
      #       --region ${{ env.AWS_REGION }} \
      #       --query "Command.CommandId" \
      #       --output text)

      #     echo "Nginx config applied: $CMD_ID"

      # # === 8. Configure Nginx (Optional If Already Done) ===
      # - name: Install and configure Nginx via SSM
      #   run: |
      #     CMD_ID=$(aws ssm send-command \
      #       --instance-ids "$INSTANCE_ID" \
      #       --document-name "AWS-RunShellScript" \
      #       --parameters 'commands=[
      #         "sudo yum install -y nginx",
      #         "sudo systemctl enable nginx",
      #         "sudo systemctl start nginx",
      #         "sudo bash -c \"cat > /etc/nginx/conf.d/nodeapp.conf <<'\''CONFIG'\''\nserver {\n  listen 80;\n  server_name _;\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \$http_upgrade;\n    proxy_set_header Connection '\''upgrade'\'';\n    proxy_set_header Host \$host;\n    proxy_cache_bypass \$http_upgrade;\n  }\n}\nCONFIG\"",
      #         "sudo nginx -t && sudo systemctl reload nginx"
      #       ]' \
      #       --region ${{ env.AWS_REGION }} \
      #       --query "Command.CommandId" \
      #       --output text)

      #     echo "Nginx configured on EC2."




name: Terraform EFS Multi-Instance Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_STATE_BUCKET: vj-test-benvolate
  TF_STATE_KEY: "EC2/terraform.tfstate"     # Network EFS EC2
  AWS_REGION: us-east-2
  ZIP_NAME: nodejs-app.zip
  ZIP_S3_KEY: nodejs/nodejs-app.zip 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout Node.js App Code (ensure latest commit)
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Confirm index.js has updated text
        run: grep 'Hello' Nodejs/index.js

      - name: Clean old zip
        run: rm -f ${{ env.ZIP_NAME }}

      - name: Zip Node.js App (with correct structure)
        run: |
          cd Nodejs
          zip -r ../${{ env.ZIP_NAME }} .
          ls -lh ../${{ env.ZIP_NAME }}

      - name: Upload deploy script to S3
        run: aws s3 cp scripts/node-deploy.sh s3://${{ env.TF_STATE_BUCKET }}/scripts/node-deploy.sh

      - name: Upload Node.js App Zip to S3
        run: aws s3 cp ${{ env.ZIP_NAME }} s3://${{ env.TF_STATE_BUCKET }}/${{ env.ZIP_S3_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ./terraform/code/EC2         # Network EFS EC2

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: ./terraform/code/EC2               # Network EFS EC2

      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: ./terraform/code/EC2               # Network EFS EC2

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/code/EC2                   # Network EFS EC2

      # === Extract EC2 Instance IDs from tfstate ===
      - name: Download remote tfstate from S3
        run: aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} tfstate.json

      - name: Extract all instance IDs from tfstate
        run: |
          # Extract all instance IDs using the module output pattern
          INSTANCE_IDS=$(jq -r '.outputs | with_entries(select(.key | startswith("module_instance_"))) | .[] | .value' tfstate.json 2>/dev/null || echo "")
          
          # If we still don't have any, try fallbacks
          if [ -z "$INSTANCE_IDS" ]; then
            # Try other common patterns
            INSTANCE_IDS=$(jq -r '.resources[] | select(.type == "aws_instance") | .instances[].attributes.id' tfstate.json 2>/dev/null || echo "")
          fi
          
          # Make sure we have IDs
          if [ -z "$INSTANCE_IDS" ]; then
            echo "Error: Could not find any instance IDs in the Terraform state"
            exit 1
          fi
          
          # Convert to array and display
          INSTANCE_IDS_ARRAY=($INSTANCE_IDS)
          echo "Found ${#INSTANCE_IDS_ARRAY[@]} instance IDs: $INSTANCE_IDS"
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Wait for SSM to be ready
        run: |
          echo "Waiting for EC2 instances to be fully initialized..."
          sleep 60

      # === Deploy & Restart Node.js App to all instances ===
      - name: Deploy & Restart Node.js App to all instances
        run: |
          for INSTANCE_ID in $INSTANCE_IDS; do
            echo "Deploying to instance: $INSTANCE_ID"
            
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "curl -o /tmp/node-deploy.sh https://vj-test-benvolate.s3.us-east-2.amazonaws.com/scripts/node-deploy.sh",
                "chmod +x /tmp/node-deploy.sh",
                "bash /tmp/node-deploy.sh"
              ]' \
              --region ${{ env.AWS_REGION }} \
              --query "Command.CommandId" \
              --output text)

            echo "SSM command sent to $INSTANCE_ID: $CMD_ID"

            # Wait for command to complete
            for i in {1..30}; do
              STATUS=$(aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --query "Status" \
                --output text 2>/dev/null || echo "Pending")

              echo "Command status for $INSTANCE_ID: $STATUS"

              if [[ "$STATUS" == "Success" ]]; then
                echo "✅ App deployed and restarted successfully on $INSTANCE_ID."
                break
              elif [[ "$STATUS" == "Failed" ]]; then
                echo "❌ Deployment failed on $INSTANCE_ID"
                aws ssm get-command-invocation \
                  --command-id "$CMD_ID" \
                  --instance-id "$INSTANCE_ID" \
                  --region ${{ env.AWS_REGION }}
                break
              fi

              if [[ $i -eq 30 ]]; then
                echo "⚠️ Deployment timed out on $INSTANCE_ID"
              fi

              sleep 10
            done
          done

      # === Configure Nginx on all instances ===
      - name: Configure Nginx on all instances
        run: |
          for INSTANCE_ID in $INSTANCE_IDS; do
            echo "Configuring Nginx on instance: $INSTANCE_ID"
            
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "sudo yum install -y nginx",
                "sudo systemctl enable nginx",
                "sudo systemctl start nginx",
                "sudo bash -c \"cat > /etc/nginx/conf.d/nodeapp.conf <<'\''CONFIG'\''\nserver {\n  listen 80;\n  server_name _;\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \$http_upgrade;\n    proxy_set_header Connection '\''upgrade'\'';\n    proxy_set_header Host \$host;\n    proxy_cache_bypass \$http_upgrade;\n  }\n}\nCONFIG\"",
                "sudo rm -f /etc/nginx/conf.d/default.conf",
                "sudo nginx -t && sudo systemctl reload nginx"
              ]' \
              --region ${{ env.AWS_REGION }} \
              --query "Command.CommandId" \
              --output text)

            echo "Nginx configuration sent to $INSTANCE_ID: $CMD_ID"
            
            # Wait for Nginx configuration to complete
            for i in {1..10}; do
              STATUS=$(aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --query "Status" \
                --output text 2>/dev/null || echo "Pending")

              echo "Nginx config status for $INSTANCE_ID: $STATUS"

              if [[ "$STATUS" == "Success" ]]; then
                echo "✅ Nginx configured successfully on $INSTANCE_ID."
                break
              elif [[ "$STATUS" == "Failed" ]]; then
                echo "❌ Nginx configuration failed on $INSTANCE_ID"
                break
              fi

              sleep 5
            done
          done

      - name: Print Summary
        run: |
          echo "====== Deployment Summary ======"
          echo "Total EC2 instances processed: $(echo $INSTANCE_IDS | wc -w)"
          echo "Deployed Node.js app with timestamp functionality to all instances"
          echo "Configured Nginx as a reverse proxy on all instances"
          echo "Each server will now display: Hello, World! - VJ [Day] [Time] - Server: [hostname]"
          echo "==============================="
