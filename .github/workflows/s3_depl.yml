# Network EFS EC2

 

name: Terraform EFS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_STATE_BUCKET: vj-test-benvolate
  TF_STATE_KEY: "EC2/terraform.tfstate"
  AWS_REGION: us-east-2
  ZIP_NAME: nodejs-app.zip
  ZIP_S3_KEY: nodejs/nodejs-app.zip 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Zip Nodejs app (contents only)
        run: |
          cd Nodejs
          zip -r ../${{ env.ZIP_NAME }} .
        working-directory: ${{ github.workspace }}

      - name: Upload deploy script to S3
        run: aws s3 cp scripts/node-deploy.sh s3://${{ env.TF_STATE_BUCKET }}/scripts/node-deploy.sh
        working-directory: ${{ github.workspace }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ./terraform/code/EC2    # Network EFS EC2

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: ./terraform/code/EC2

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/code/EC2


      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: ./terraform/code/EFS





# #########################################


      # === 6. Extract EC2 Instance ID from tfstate ===
      - name: Download remote tfstate from S3
        run: aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} tfstate.json

      - name: Read instance ID from tfstate.json
        run: |
          INSTANCE_ID=$(jq -r '.outputs.module_instance_id_for_ssm.value' tfstate.json)
          echo "Resolved from tfstate: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for SSM to be ready
        run: |
          echo "Waiting for EC2 + SSM Agent to initialize..."
          sleep 60

      # === 7. Install Node App from S3 to EFS and Start with PM2 ===
      - name: Deploy & Restart Node.js App with Zero Downtime
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "curl -o /tmp/node-deploy.sh https://vj-test-benvolate.s3.us-east-2.amazonaws.com/scripts/node-deploy.sh",
              "chmod +x /tmp/node-deploy.sh",
              "bash /tmp/node-deploy.sh"
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "SSM command sent: $CMD_ID"

          for i in {1..30}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "Status" \
              --output text 2>/dev/null || echo "Pending")

            echo "Command status: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              echo "✅ App deployed and restarted successfully."
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "❌ Deployment failed"
              aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }}
              exit 1
            fi

            sleep 10
          done

      # === 8. Configure Nginx (Optional If Already Done) ===
      - name: Install and configure Nginx via SSM
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo yum install -y nginx",
              "sudo systemctl enable nginx",
              "sudo systemctl start nginx",
              "sudo bash -c \"cat > /etc/nginx/conf.d/nodeapp.conf <<'CONFIG'\nserver {\n  listen 80;\n  server_name _;\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \$http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host \$host;\n    proxy_cache_bypass \$http_upgrade;\n  }\n}\nCONFIG\"",
              "sudo nginx -t && sudo systemctl reload nginx"
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "Nginx configured on EC2."

